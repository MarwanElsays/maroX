server:
  port: 8080
spring:
  application:
    name: "users"
  profiles:
    active: "prod"
  datasource:
    url: jdbc:h2:mem:testdb
    driverClassName: org.h2.Driver
    username: sa
    password: ''
  h2:
    console:
      enabled: true
  jpa:
    database-platform: org.hibernate.dialect.H2Dialect
    hibernate:
      ddl-auto: update
    show-sql: true
  config:
    import: "optional:configserver:http://localhost:8071/"
  cloud:
    openfeign:
      circuitbreaker:
        enabled: true
  rabbitmq:
    host: "localhost"
    port: 5672
    username: "guest"
    password: "guest"

management:
  endpoints:
    web:
      exposure:
        include: "*"
  health:
    readiness-state:
      enabled: true
    liveness-state:
      enabled: true
  endpoint:
    health:
      probes:
        enabled: true
    shutdown:
      access: unrestricted
  info:
    env:
      enabled: true

eureka:
  instance:
    preferIpAddress: true
  client:
    fetchRegistry: true
    registerWithEureka: true
    serviceUrl:
      defaultZone: http://localhost:8070/eureka/

info:
  app:
    name: "posts"
    description: "Posts microservice for maroX app"
    version: "1.0.0"

logging:
  level:
    com:
      marox:
        users: DEBUG
    io:
      github:
        resilience4j:
          circuitbreaker: DEBUG

resilience4j.circuitbreaker:
  configs:
    default:
      slidingWindowSize: 10
      permittedNumberOfCallsInHalfOpenState: 10
      failureRateThreshold: 70
      waitDurationInOpenState: 5000

resilience4j.retry:
  configs:
    default:
      maxAttempts: 3
      waitDuration: 100
      enableExponentialBackoff: true
      exponentialBackoffMultiplier: 2
      ignoreExceptions:
        - java.lang.NullPointerException
      retryExceptions:
        - java.util.concurrent.TimeoutException
  instances:
    testInstanceRetry: # Instance-specific configuration
      baseConfig: default  # Inherit from the default config
      maxAttempts: 5       # Override maxAttempts
      waitDuration: 500ms  # Override waitDuration

resilience4j.ratelimiter:
  configs:
    default:
      timeoutDuration: 1000
      limitRefreshPeriod: 5000
      limitForPeriod: 1
